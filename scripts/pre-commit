#!/bin/bash

# pre-commit - Git pre-commit hook for code quality

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo "üîç Running pre-commit checks..."

# 1. Check for formatting issues
UNFMT_FILES=$(gofmt -l .)
if [ -n "$UNFMT_FILES" ]; then
    echo -e "${RED}‚ùå Formatting issues found:${NC}"
    echo "$UNFMT_FILES"
    echo ""
    echo "Run 'make fmt' to fix formatting"
    exit 1
fi

# 2. Run go vet on changed files
CHANGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
if [ -n "$CHANGED_GO_FILES" ]; then
    echo "Running go vet on changed files..."
    if ! go vet $CHANGED_GO_FILES; then
        echo -e "${RED}‚ùå go vet failed${NC}"
        exit 1
    fi
fi

# 3. Check for debugging statements
if [ -n "$CHANGED_GO_FILES" ]; then
    if grep -n "fmt\.Print\|log\.Print\|println" $CHANGED_GO_FILES | grep -v "_test.go"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Debug print statements found${NC}"
        echo "Consider removing or using proper logging"
        # This is a warning, not a failure
    fi
fi

# 4. Check for TODO comments
TODO_COUNT=$(grep -n "TODO\|FIXME" $CHANGED_GO_FILES 2>/dev/null | wc -l || echo 0)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ÑπÔ∏è  Info: $TODO_COUNT TODO/FIXME comments in staged files${NC}"
fi

# 5. Run tests for changed packages
if [ -n "$CHANGED_GO_FILES" ]; then
    PACKAGES=$(echo "$CHANGED_GO_FILES" | xargs -n1 dirname | sort -u | sed 's|^|./|')
    echo "Running tests for changed packages..."
    if ! go test -short $PACKAGES; then
        echo -e "${RED}‚ùå Tests failed${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Pre-commit checks passed${NC}"